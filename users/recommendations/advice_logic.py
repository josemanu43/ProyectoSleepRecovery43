# users/recommendations/advice_logic.py
from abc import ABC, abstractmethod
import pandas as pd


class BaseAdvice(ABC):
    """Interfaz base para todos los tipos de consejos."""
    @abstractmethod
    def get_advice(self, data):
        pass

class DurationAdvice(BaseAdvice):
    """Consejos basados en la duraci칩n promedio del sue침o."""
    def get_advice(self, average_duration):
        if average_duration < 360: # Menos de 6 horas (360 min)
            return {
                'type': 'Duraci칩n',
                'text': 'Tu duraci칩n promedio de sue침o es baja. Intenta ir a la cama 30 minutos antes de lo habitual para mejorar tu descanso.',
                'metric': f'{average_duration:.0f} min'
            }
        elif average_duration > 540: # M치s de 9 horas (540 min)
            return {
                'type': 'Duraci칩n',
                'text': 'Est치s durmiendo demasiado tiempo. Esto puede indicar fatiga subyacente. Aseg칰rate de tener una rutina matutina consistente.',
                'metric': f'{average_duration:.0f} min'
            }
        else:
            return {
                'type': 'Duraci칩n',
                'text': '춰Excelente! Tu duraci칩n de sue침o est치 dentro del rango recomendado (7-9 horas). Mant칠n esta consistencia.',
                'metric': f'{average_duration:.0f} min'
            }

class ConsistencyAdvice(BaseAdvice):
    """Consejos basados en la consistencia de las horas de sue침o/vigilia."""
    def get_advice(self, sleep_sessions_df):
        # La consistencia se calcula midiendo la desviaci칩n est치ndar (STD) de las horas de inicio de sue침o.
        # Cuanto menor sea el STD, m치s consistente es el horario.
        
        # Convertir 'start_time' a solo la hora del d칤a (minutos desde medianoche)
        sleep_sessions_df['start_hour_min'] = (
            sleep_sessions_df['start_time'].dt.hour * 60 + 
            sleep_sessions_df['start_time'].dt.minute
        )
        
        # Calcular la desviaci칩n est치ndar en minutos
        std_minutes = sleep_sessions_df['start_hour_min'].std()
        
        if pd.isna(std_minutes) or std_minutes > 60: # M치s de 1 hora de desviaci칩n
            return {
                'type': 'Consistencia',
                'text': 'Tu horario de sue침o es muy inconsistente. Intenta acostarte y levantarte a la misma hora, incluso los fines de semana.',
                'metric': f'{std_minutes:.0f} min de desviaci칩n'
            }
        else:
            return {
                'type': 'Consistencia',
                'text': 'Tienes una buena consistencia en tus horarios de sue침o. Esto es clave para regular tu ritmo circadiano.',
                'metric': f'{std_minutes:.0f} min de desviaci칩n'
            }
        
# advice_logic.py

class DurationAdviceGenerator:
    def get_advice(self, average_duration):
        # l칩gica de duraci칩n...
        return {"category": "Duraci칩n", "message": "...", "metric": f"{average_duration} min"}


class ConsistencyAdviceGenerator:
    def get_advice(self, df):
        # l칩gica de consistencia...
        return {"category": "Consistencia", "message": "...", "metric": f"{...} min de desviaci칩n"}


class TemperatureAdviceGenerator:
    def get_advice(self, temp_celsius):
        if temp_celsius is None:
            return {
                "category": "Temperatura",
                "message": "No se pudo obtener la temperatura actual.",
                "metric": "N/A"
            }

        if temp_celsius < 18:
            message = "La temperatura est치 algo fr칤a. Usa una cobija extra o aseg칰rate de mantener la habitaci칩n c치lida."
        elif 18 <= temp_celsius <= 24:
            message = "La temperatura es agradable para dormir. Mant칠n la ventilaci칩n adecuada."
        else:
            message = "Hace calor. Considera ventilar la habitaci칩n o usar ropa ligera para dormir mejor."

        return {
            "category": "Temperatura",
            "message": message,
            "metric": f"{temp_celsius}춿C"
        }


class AdviceFactory:
    generators = {
        "duration": DurationAdviceGenerator(),
        "consistency": ConsistencyAdviceGenerator(),
        "temperature": TemperatureAdviceGenerator(),  # 游녣 aqu칤 agregas el tuyo
    }

    @staticmethod
    def get_advice_generator(advice_type):
        return AdviceFactory.generators.get(advice_type)

class TemperatureAdvice:
    def get_advice(self, temp_celsius):
        if temp_celsius is None:
            return {
                "category": "Temperatura",
                "message": "No se pudo obtener la temperatura actual.",
                "metric": "N/A"
            }

        if temp_celsius < 18:
            message = "Tu habitaci칩n est치 demasiado fr칤a, intenta subir la calefacci칩n."
        elif temp_celsius > 24:
            message = "Tu habitaci칩n est치 demasiado caliente, intenta ventilarla o usar aire acondicionado."
        else:
            message = "La temperatura de tu habitaci칩n es adecuada para dormir."

        return {
            "category": "Temperatura",
            "message": message,
            "metric": f"{temp_celsius}춿C"
        }
